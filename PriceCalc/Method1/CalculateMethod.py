import statistics
import math

bar = [529, 113, 793, 407, 347, 858, 225, 287, 19, 312, 495, 648, 644, 269, 708, 898, 920, 592, 834, 574, 791, 444, 116, 461, 970, 672, 308, 271, 490, 447, 995, 755, 84, 357, 274, 665, 803, 690, 880, 117, 90, 703, 804, 531, 251, 36, 626, 204, 651, 201, 386, 748, 751, 508, 567, 380, 406, 511, 691, 527, 553, 59, 339, 199, 51, 879, 266, 272, 814, 812, 865, 45, 622, 936, 409, 432, 542, 887, 634, 7, 655, 236, 990, 29, 475, 148, 723, 112, 742, 366, 522, 24, 60, 64, 895, 653, 279, 159, 384, 144, 694, 606, 878, 897, 521, 44, 675, 25, 772, 359, 925, 245, 994, 727, 381, 78, 192, 544, 244, 629, 471, 4, 877, 230, 654, 472, 754, 399, 726, 514, 855, 418, 680, 950, 555, 905, 139, 859, 365, 435, 614, 270, 258, 530, 98, 615, 657, 14, 3, 820, 214, 668, 869, 486, 188, 983, 35, 243, 80, 389, 473, 546, 515, 76, 541, 787, 344, 68, 906, 684, 660, 632, 31, 285, 488, 854, 180, 586, 300, 636, 766, 369, 118, 203, 286, 883, 66, 352, 829, 986, 6, 276, 142, 132, 612, 532, 745, 533, 796, 434, 53, 502, 173, 893, 1, 193, 429, 847, 248, 198, 899, 844, 317, 229, 988, 711, 353, 346, 919, 222, 507, 934, 67, 824, 443, 712, 468, 385, 890, 797, 853, 427, 971, 816, 401, 599, 32, 147, 923, 340, 746, 33, 534, 106, 647, 891, 932, 48, 979, 721, 211, 956, 336, 722, 782, 570, 809, 506, 795, 991, 411, 715, 93, 419, 999, 182, 917, 707, 415, 454, 693, 462, 619, 212, 130, 852, 209, 769, 549, 635, 692, 512, 20, 124, 836, 810, 922, 343, 907, 479, 595, 88, 307, 731, 984, 12, 896, 280, 518, 376, 698, 221, 949, 119, 773, 806, 141, 523, 765, 160, 736, 709, 470, 27, 955, 758, 945, 127, 664, 255, 767, 478, 566, 165, 293, 28, 497, 247, 778, 154, 737, 335, 749, 364, 388, 397, 40, 474, 145, 23, 646, 788, 564, 808, 623, 18, 81, 700, 169, 125, 643, 696, 536, 676, 642, 587, 337, 681, 958, 830, 951, 370, 104, 943, 268, 900, 638, 620, 382, 543, 483, 377, 719, 941, 627, 831, 735, 505, 82, 309, 349, 757, 734, 75, 559, 179, 892, 872, 383, 284, 403, 423, 402, 743, 835, 208, 227, 484, 315, 311, 771, 526, 843, 650, 149, 583, 482, 601, 813, 550, 491, 811, 99, 916, 371, 354, 74, 857, 100, 55, 437, 789, 562, 361, 257, 426, 234, 799, 663, 410, 449, 277, 39, 930, 493, 845, 963, 580, 146, 998, 966, 501, 186, 674, 519, 43, 937, 256, 252, 305, 52, 535, 720, 170, 686, 494, 750, 281, 525, 888, 961, 97, 151, 926, 944, 569, 156, 195, 551, 61, 670, 500, 425, 57, 913, 725, 166, 628, 47, 573, 105, 915, 368, 876, 342, 946, 921, 278, 412, 185, 613, 942, 34, 870, 908, 827, 282, 341, 101, 313, 288, 909, 15, 164, 616, 987, 874, 585, 390, 263, 327, 581, 841, 617, 189, 158, 424, 153, 21, 960, 780, 496, 882, 95, 129, 764, 30, 819, 86, 197, 730, 253, 330, 168, 962, 136, 458, 832, 591, 2, 807, 260, 167, 931, 367, 448, 952, 49, 26, 794, 41, 338, 420, 964, 400, 413, 476, 126, 487, 718, 864, 641, 445, 935, 577, 609, 302, 659, 162, 351, 563, 265, 671, 929, 513, 455, 237, 763, 235, 524, 860, 242, 838, 825, 417, 128, 8, 172, 131, 866, 974, 752, 732, 324, 217, 310, 114, 92, 218, 205, 704, 873, 982, 779, 716, 87, 556, 421, 391, 328, 17, 560, 618, 152, 196, 91, 658, 837, 603, 16, 246, 210, 833, 924, 456, 662, 123, 604, 191, 759, 176, 927, 677, 805, 828, 451, 393, 157, 842, 283, 108, 194, 884, 697, 323, 756, 850, 875, 394, 171, 395, 239, 321, 768, 699, 774, 761, 190, 516, 904, 871, 656, 137, 378, 520, 910, 724, 174, 540, 469, 954, 545, 957, 232, 267, 973, 332, 738, 320, 304, 903, 297, 914, 996, 102, 558, 538, 918, 226, 240, 770, 433, 140, 753, 528, 261, 976, 783, 912, 392, 947, 94, 685, 980, 477, 689, 303, 298, 669, 70, 633, 886, 103, 630, 611, 840, 480, 781, 985, 744, 356, 150, 713, 134, 802, 69, 460, 405, 296, 11, 254, 608, 867, 846, 133, 442, 155, 375, 223, 798, 360, 826, 138, 333, 688, 695, 446, 63, 939, 997, 885, 439, 294, 552, 228, 467, 590, 207, 992, 13, 683, 561, 374, 292, 10, 83, 161, 318, 621, 396, 372, 868, 262, 329, 319, 314, 856, 785, 373, 213, 436, 224, 463, 120, 818, 37, 450, 661, 96, 58, 143, 431, 762, 741, 350, 548, 430, 969, 54, 597, 250, 728, 679, 678, 682, 965, 249, 953, 404, 295, 241, 219, 777, 503, 363, 861, 578, 233, 978, 408, 301, 594, 499, 184, 481, 509, 610, 42, 504, 967, 466, 605, 135, 115, 517, 790, 379, 464, 554, 215, 264, 596, 355, 928, 273, 428, 901, 705, 747, 989, 325, 178, 572, 557, 331, 457, 849, 362, 121, 110, 863, 334, 489, 72, 817, 163, 881, 398, 673, 631, 216, 576, 584, 492, 387, 453, 107, 776, 579, 851, 902, 588, 911, 414, 5, 822, 79, 291, 440, 111, 220, 714, 839, 89, 784, 624, 345, 56, 639, 640, 259, 181, 1000, 733, 959, 889, 46, 568, 85, 62, 667, 290, 565, 600, 452, 821, 598, 740, 702, 848, 652, 326, 775, 422, 187, 358, 537, 348, 485, 666, 687, 202, 459, 322, 289, 815, 65, 438, 739, 571, 589, 539, 177, 607, 71, 109, 510, 972, 801, 800, 416, 175, 22, 823, 637, 792, 729, 710, 306, 575, 441, 316, 786, 593, 975, 275, 862, 38, 77, 933, 602, 547, 9, 649, 894, 231, 706, 645, 122, 717, 498, 968, 73, 938, 981, 582, 993, 50, 183, 206, 701, 940, 760, 299, 238, 948, 977, 625, 465, 200]


def get_average(cur_list):
    if len(cur_list) > 0:
        return sum(cur_list) / len(cur_list)

    return 0


def get_stdev(list):
    if len(list) > 0:
        return statistics.stdev(list)
    return 0


def get_new_list(cur_list):
    average = get_average(cur_list)
    standard_deviation = get_stdev(bar)
    for price in cur_list:
        if price < (average - standard_deviation) or price > (average + standard_deviation):
            cur_list.remove(price)
    return cur_list

def same_average(given_list, last_average, same_average_counter):
    if last_average == get_average(given_list):
        return same_average_counter + 1
    else:
        return 0

def check_only_duplicates(given_list, same_average_counter):
    checking_set = set()

    for element in given_list:
        checking_set.add(element)
    if len(checking_set) == 1 or same_average_counter == 10:
        return True
    else:
        return False

def calc_optimum_price(given_list):
    average = 0
    same_average_counter = 0
    while not check_only_duplicates(given_list, same_average_counter):
        average = get_average(given_list)
        same_average_counter = same_average(given_list, average, same_average_counter)
        given_list = get_new_list(given_list)
    print("Optimalpreis ist: " + str(math.ceil(get_average(given_list))))
    return math.ceil(get_average(given_list))
